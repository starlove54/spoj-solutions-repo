
Following java code gives a TLE on spoj after that I have also given the c++ code 


Java code starts 
____________________________________________________________________________________________

import java.util.Scanner;

public class Locker {
    private final static int M = 1000000000 + 7;

    public static long binaryExpIterative(long a, long b) {
        long ans = 1;
        a %= M;
        while (b > 0) {
            if (b % 2 == 1) {
                ans = (ans * a) % M;
            }
            a = (a * a) % M;
            b >>= 1;
        }
        return ans;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            long n = sc.nextLong();
            if (n < 3) {
                System.out.println(n);
                continue;
            }
            long ans1 = 0;
            if (n % 3 == 0) {
                ans1 = binaryExpIterative(3, n / 3) % M;
            } else if (n % 3 == 1) {
                ans1 = (4 * binaryExpIterative(3, (n / 3) - 1)) % M;
            } else {
                ans1 = (2 * binaryExpIterative(3, (n / 3))) % M;
            }
            System.out.println(ans1);
        }
    }
}

____________________________________________________________________________________________
Java code ends 


c++ code starts
____________________________________________________________________________________________

#include <iostream>
#include <cmath>
using namespace std;

const int M = 1000000000 + 7;

long long binaryExpIterative(long long a, long long b) {
	long long ans = 1;
	a %= M;
	while (b > 0) {
		if (b % 2 == 1) {
			ans = (ans * a) % M;
		}
		a = (a * a) % M;
		b >>= 1;
	}
	return ans;
}

int main() {
	int t;
	cin >> t;
	while (t--) {
		long long n;
		cin >> n;
		if (n < 3) {
			cout << n << endl;
			continue;
		}
		long long ans1 = 0;
		if (n % 3 == 0) {
			ans1 = binaryExpIterative(3, n / 3) % M;
		}
		else if (n % 3 == 1) {
			ans1 = (4 * binaryExpIterative(3, (n / 3) - 1)) % M;
		}
		else if (n % 3 == 2) {
			ans1 = (2 * binaryExpIterative(3, (n / 3))) % M;
		}
		cout << ans1 << endl;
	}
	return 0;
}

____________________________________________________________________________________________
c++ code ends

